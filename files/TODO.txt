// <<< IT SHOULD BE FORBIDDEN TO HAVE A DESCRIPTOR WITH SIZE 0  
// <<< WHAT IF A MODEL HAS NO DESCRIPTOR? (review)
// <<< fragTools.frag (triplanarNormal fix)
// <<< ambient sun light can be attenuated from CPU (update light obj)
// <<< apply height map
// <<< vt_32 is introduced twice
Solve warnings
Use enum for refering to a render pass (geometryPass, lightingPass, forwardPass, postprocessingPass).

TODO:
	dynamic NUMLIGHTS
	Load mesh with Tangents + Bitangents
	Associate UBOsize_vs with UBOtype
	Order of execution (worker)
	Use 3 subpasses intead of 3 render passes (GS, LS, FS)

	Automatic shader for lighting pass and no-PP.
	vkGetPhysicalDeviceFormatProperties?

	Optimize textures: 
		Non-triplanar mapping?
		No double texture scaling

	Bug: If chunks are being loaded and I escape window, it crashes
	Bug: Invalid render pass (other error may be possible) when moving camera and resizing window.
	Soften ambient light
	Shader maker
	snow distribution not working well

	Make textures have a size that's a power of 2
	reduceNightLight doesn't work due to lighting done in lighting pass
	setNumActiveInstances() should increase the number of both vsUBO and fsUBO (but there also should be an existing general UBO)
	setNumActiveInstances() should resize the number of instances if it's bigger than the maximum size
	Problem if we don't have any UBO?

	renderPipeline destructor should have content

	DS: Transparent sea?!
	DS: pass tangents/bitangents to G-buffer?
	DS: Get rid of 
		savePrecalcLightValues(inPos, inCamPos, ubo.light, inLight);
		savePNT(inPos, normalize(inNormal), inTB3);

	Remove view and proj matrices from update()
	Use early depth test in basic shader whenever advisable
	Adapt grass color to terrain height
	Define ModelInfo of planet/sphere/chunk in entity.cpp
	Geometry shader for grass (place points and get grass)

	Distributor: Make it fill even between vertices
		Far trees doesn't fit all near trees (in position and size)
	
	-> Make billboard trees for far distances > Delete GrassSystem
	- Second thread: Create & delete objects in the same order they have been asked
	- Debug threading conflict
	Billboards have normals that always look to the light source (sun) side
	cubemap should rotate too
	distributor saves population (make it faster by looking for chunkId as key of a std::map)
	Trees randomness: vary branch textures and XY scale
	Trees in Blender are greener
	crop grass billboard
	plant grass roots
	implicit derivatives for mipmap selection (https://community.khronos.org/t/artifact-in-the-limit-between-textures/109162)

	Increase normals intensity
	Analytical normals
	Bug: sun is blinking

	learnOpenGL:
		GLSL
		Selection frame (stencil testing)
		Post-processing (framebuffers)
		Use gl_fragCoord.z for distance
		-> UBOs
		Post-processing to a framebuffer
		Geometry shader
		Custom anti-aliasing
		- Deferred shading / parallelism problem

	Darken grass below / Make roots
	Increment ambient light during day
	Tangent computation
	Load vertices from file: When many meshes exist in a file, different objects should be created (problem: different shaders and textures used)
	Planet component should be singleton?
	[Trees], small grass, [big grass], [rocks], bushes, flowers
	XY scaling of trees
	Base de tree
	Use occlussion map for stones
	Rocky is not using height map
	Delete objs first, load second (possible?)
	std::filesystem
	Dithered appearance of new objects
	Normals for basic shader (load vertex data from file including normal map, not only pos, normal, & UV (v332))
	Any way of not updating grass if not moved?
	getNoise(): Let glm::vec3 be passed as arguments
	Noiser: member "scale" should multiply resulting noise? I think it' only about scale, not amplitude.
	GrassSystem_planet::updateState has to be implemented in s_Distributor
	// what to do when multiple intances? (in s_Model & in c_move) <<<
	Systems: If Entities with the component == 0, return;
	fragTools: Is needed a  void savePNT(vec3 pos, vec3 norm, TB tb)
	Export fbx (for tangents)
	Grass:
		Dont' we have ground normal?
		Updating UboType::grassPlanet (and s_Distributor) requires looking for the planet model to get the planet object (for using chunks, noiser...). Shouldn't be the required data exist in a singleton?

	Do models from Blender have duplicated vertices?
	Delete noMove and noData?
	Use basic shaders (v_basic_332, for example)
	Don't update static ubo's values
	ShaderModifier (defines what textures are passed: albedo, normal, spec, roughness)
	Terrain chunk: Why 29 vertices per side?
	
	noiser::getRange() necessary?
	Planet general texture
	Put as components the main Renderer & other classes parameters
	Scale sea texture
	Global planet params?
	Analytical normal (closes gaps & make texture fit)
	> FPV camera
	> Corregir distribuciÃ³n de hierba lejana
	> Randomize grass positioning
	> Optimization: Reduce size of vertex data / Delete not-used UBO's variables / Don't update UBO's variables that don't need updating.
	> Placement: trees / grass / base / NPCs

	Bugs:
	Validation layer: Validation Error: [ UNASSIGNED-Threading-MultipleThreads ] 
	Object 0: handle = 0xcfef35000000000a, type = VK_OBJECT_TYPE_COMMAND_POOL; | MessageID = 0x141cb623 | 
	THREADING ERROR : vkAllocateCommandBuffers(): object of type VkCommandPool is simultaneously used in thread 0xa70 and thread 0x4198
	
Good practice:
	Use const references as parameters (and const functions)
	Use smart pointers (maybe also for shaders and textures in order to don't having counters (ModelData::~ModelData()))
	Iterators from different lists cannot be compared, but they are (deleteModel...) (https://stackoverflow.com/questions/4657513/comparing-iterators-from-different-containers)

	delete non-used elements (camera class...)
	Terrain texture for a given vertex is determined at CPU
	struct Sphere has to be a struct? Furthermore, structs are public by default, so why are you specifying "public:"?
	Bug: shaderLoaders["x"] = X causes crash at app-close-up, but shaderLoaders.insert("x", X) doesn't

	Transparent coast water requires "planetSeaGrid.toLastDraw()", thus it requires a different UBOtype.
	Grass: Lightning on vertical normal or terrain normal?

	Components: c_move, c_scale, c_pos, c_rotations

	ECS:
		Use only entities id
		Make systems safer (update()) (like using const) (are components/entities being found?) (method names from factory & entity classes)
		Improve c_ModelMatrix construction parameters
		s_Engine::update

	getSqrDist / getDist / ...

	Grass:
		X - quit alpha channel so bbs don't need to be sorted
		X - double face grass
		X - too sided (and close?) billboards are deleted (dithering?)
		light system (grass too dark at evening)
		step size
		dithering
	
	Bug: If I don't move, chunks may not appear ever.
	Chunks rendering based on distance makes no difference between chunks types (see planet from afar).
	Don't render chunks if [out of cam view angle (fov)] / [you don't move camera]

	DynamicGrid::chunks requires lookup and delete elements. Is there a better DS for this than std::map?
	PlanetGrid::isVisible & modelOrdered & fullyConstructed & inModels necessary?
	Chunks don't empty their buffers after construction of Model. However, this is useful for grass positioning.

	Log
	Optimize shaders
	Plain coasts
	seaPlanet VS: outCamSqrHeight & 
	>Configurable UBOs for dynamic grids
		Pass camera height param to sea shader
	Unloaded resources are deleted in loading thread, but they should be deleted in main thread.
	Mutex for ShaderLoader::loadShader and loadTexture (mutResources is blocking main thread when compiling shaders)

	Redefine renderpass (Implement axis and reticule in PP). 
		Render different layers (background, scene, HUD) using different subpasses. Render reticule & axis to 3th subpass
		Atmosphere computed in subpass (not new renderpass) 
		Single sample for background (1st render pass)
		Single sample for PP performed in subpass?
		Single sample for all PP
	
	Compute atmosphere in a subpass
	ModelData::vertexType doesn't exist / Use modules in VerticesLoader and so / Keep data in VerticesLoader and so and delete it when not necessary (use modules).
	ModelSet doesn't work if there is no dynUBO_vs

	Delete Dataloader object when already used for passing data / Same for vertex data stored in ModelData object.
	Delete vertices and indices buffers after uploading data.
	Take out from memory data stored from the beginnning (cube vertices, etc)
	Pass vector of vertices to DataLoader
	DataFromUser_notComputed
	Pass complete model + additional textures + others (vertices, indices, textures, shaders)
	Link dll library (assimp)
	Use VertexSet::reserve in VertexSet::push_back and in DataFromFile2
	Load model from callback
	Modify worker mechanism: Data is uploaded in models. Each model loads texture first, and vertex later.
	Use height map to get sea vertex positions (texture passed to vertex shader)
	Load texture files on worker
	Solve <<<, LOOK, ERROR (and MVS errors/warnings)
	> typedef vec3size and co.
	Waves:
		Sea chunks borders doesn't fit due to waves.
		Maybe, the more normal and sun light align (or cam dir), the more green water is.
		Green with height
		Black shadows when waves are too sharp (bad normals)
		Transparent when close, opaque when far / Transparency near cost / Transparent water & darked terrain)
		Foam specularity & roughness in the limit is evident
		Holes in axes zone / Spherical sea: Hole in waves origin (vertex displacement)
		> Gaps problem: Waves are computed for middle vertices too.
		Reflections
		Sea has to know about ground. Thus, sea+ground has to be passed to shader. Thus, both have to be calculated at the same time. Thus, dynamicGrid changes are required.
	Ocean, sand, trees/bush, rocks, MixNoise
	gap-fix for multiple dynamic grids
	Apply different LOD when above certain region (not only based on distance to chunk)
	Create a list of leaf nodes and work with them instead of traversing the entire tree (like in DynamicGrid::updateUBOs_help)
	Fix/improve loadingThread multiple accesses to lists
	It's not necessary to update all the uniforms. Some are not modified anymore.
	X Fix chunk's gaps: two versions, one for current tree, another for new tree
	- No-noise dynamic grid
	Default PP shader
	Method for replacing one/some model/s with one/some model/s (only after the new model/s have been loaded)
	Python script
	mipmaps
	No blurr between textures starting from X distance
	Sun with high-dynamic-range rendering
	newPostProc()
	Delete models in queue for loading but that aren't required anymore (example: when flying fast over terrain)
	More than 1 loading threads
	createCommandBuffer()
	attachment properties (loadOp...)
	Loading thread class
	ModelObjects created directly in main() and passed to Renderer object
	ImGui
	Unify getQuad()
	Clear vertex/indices in model objects when already uploaded to GPU (maybe std::move vertex data, so data is not required to exist outside the object until model is loaded)
	Try render with no msaa
	Optimize layers rendering (command buffer)
	Automatize (add to Renderer) the rendering of one texture at the same time other texture is unrendered
	Review command buffer creation
	Review anisotropic filtering
	Review createUniformBuffers
	Review ModelData::fullConstruction() (i.e., union of DataLoader->loadVertex() & createVertexBuffer())
	Review ModelData::vertex & ModelData::indices. Maybe, not required once VkBuffer is created.
	Review UBO::ubo. Maybe not required if we can copy data into VkBuffer directly 
	Delete chunks that are in modelsToLoad but that aren't needed now because we have moved too far away from them
	Increment snow scale / Scale up textures
	Fix plane camera (and possibly other cameras)
	Adjust radio of expensive rendering (planet)
	Color filters for textures depending on height
	Don't render non-visible Chunks
	SimonDev
	-Abstract User input and make it visible for everybody (and fix it)
	Steps: Physics calculations should be done in each step of X length
	Walking only permitted on certain levels of slopes (decrease speed exponentially or similar) 
	Rozamiento / Fuerza instead of speed
	Slopes are longer steps than plains
	Add FastNoise2 library (https://github.com/Auburn/FastNoise2/wiki/2:-Including-the-library-in-your-project) or libnoise
	Shader: Can some job be done in the vertex shader?
	Paths using Perlin noise
	All angles in radians
	Document: Vulkan system, loading thread system, Grid system
	Shader template & Fix other shaders using the template
	Optimize fragment shader (light elements...)
	Pass numLights to Chunk, DynamicGrid, etc.
	Review vertex.hpp classes
	Clouds
	Delete elements to load that are no longer required to load (models, textures)
	Move skybox with the sun
	Create Light objects containing 2 structures (one with data for vertex shader and other for fragment shader)
	Optimize shaders (normalization...)
	deleteModel(): problem with models that are still in modelsToLoad
	Am I asking GPU for too large heap space?
	Camera
	Inputs (MVC)
	GUI
	FPS > 30
	Profiling
	Later: Multithread loading / Reorganize 2nd thread / Parallel thread manager
	Later: Compute MVP matrix and pass it to the shader

	Scheme pictures
	Computer graphics article
	Read specs & tutorial
	learnopengl.com / SimonDev
	Later: Readme.md

Less important:

	Study implications of using square distances in shaders
	Analyze std::hash (vertex.hpp)
	Optimize radius calculation (like just calculating sqrt(radius))

Not required:
	
	Spherical chunks borders (for texture scaling) are not perfect (acceptable bug)

BUGS:
	Sometimes camera continue moving backwards/left indefinitely.
	Camera jump when starting to move camera.
	When escaping too soon (before planet is rendered), exception happens (elements not already destroyed when calling cleanup)
	Bug? In updateStates: render() & set UBOs > move models > Copy UBOs to GPU. Problem: UBOs must be set immediatly after render() because, if it's rendered too fast, the model could be rendered before moving models.
	When ESC pressed, a bug arises if modelsToLoad has still models when closing
	Fragment shader (f_planet.frag): Artifact lines
	-Check whether the Y axis in normal maps is correctly fipped upside down (Vulkan maps Y axis inversely than OGL)
	Check that normal maps are correctly put in each face of the planet during Triplanar mapping (I suspect they may not be)
	BUG: PRESS ESCAPE JUST BEFORE RENDERING
	Bug when resizing window (crashes) (and maybe not everything is loaded yet) (Out-of-date/Suboptimal KHR or window resized)
	Make terrain too big makes chunks not to update (maybe because chunk's center is too far)
	Baked optical depth: Weird pixels in borders

----------------------------------------

	- Axis
	- Sun billboard (transparencies)
	- Terrain
	> Modify NoiseSurface for it to have some state (noiseSet...) and generate buffers outside itself
	Make the renderer a static library
	Add ProcessInput() maybe
	Dynamic states (graphics pipeline)
	Push constants
	Deferred rendering (https://gamedevelopment.tutsplus.com/articles/forward-rendering-vs-deferred-rendering--gamedev-12342)

	UBO of each renders should be stored in a vector-like structure, so there are UBO available for new renders (generated with setRender())
	Destroy Vulkan buffers (UBO) outside semaphores

	TerrainGrid:
	>Planet version
	exception when going too far -> try your own octaves implementation
	Destructor TerrainGrid/Chunks that correctly deletes chunks
	Recicle chunks
	>Remove some non-visible chunks when there are too much of them (saves memory)
	>computeTerrain may cause bottleneck (no second thread loading)

	SphericalChunk:
	>Improve biplanar texture (shader) (and make normals/tangents correctly: Trilinear normal mapping (tangents))
	>Bug when closing rendered
	Add atmosphere
	Get textures
	Try different scenarios


	>Refactor normal maps shaders & Uniforms setting
	Finish graphics article
	Continue LearnOpenGL
	Sea
	-Bug (objects not destroyed): Looks like modelsToDelete still has objects
	GUI
	Reescalation of textures with distance
	Omit VertexType, VertexPT, and similar things
	Take UV coords out from terrain data
	Create multiple "Renderer::models", one for each layer
	Rotate skybox (with the sun)
	-Fix specular lightning (if wrong) (it illuminates ground before sunrise)
	-Move Light to vertex shader

Rendering:
	- Vertex struct has pos, color, text coord. Different vertex structs are required.
	- Points, lines, triangles
	- 2D graphics
	- Transparencies
	- Scene plane: Draw in front of some rendering (used for skybox or weapons)
	Make classes more secure (hide sensitive variables)
	Parallel loading with many threads.
	When passing vertex data directly, should I copy it or pass by reference? Ok, a ref is passed to Renderer, which passes a ref to modelData, which copies data in a vector, and later in a VkBuffer. Could we avoid the copy in a vector?
	> Many renders: Now, UBO is passed many times, so View and Projection matrix are redundant. 
	> update(): Projection matrix should be updated only when it has changed
	> Generalize loadModel() (VertexPCT, etc.) 
	> Can uniforms be destroyed within the UBO class whithout making user responsible for destroying before creating 
	> Check that different operations work (add/remove renders, add/erase model, 0 renders, ... do it with different primitives)
	X VkDrawIndex instanceCount -> check this way of multiple renderings

	- Allow to update MM immediately after addModel() or addRender()
	- Only dynamic UBOs
	- Start thread since run() (objectAlreadyConstructed)
	- Improve modelData object destruction (call stuff from destructor, and take code out from Renderer)
	Can we take stuff out from thread 2?
	Optimization: Parallel commandBuffer creation (2 or more commandBuffers exist)
	model&commandBuffer mutex, think about it
	Usar numMM o MM.size()?
	Profiling
	Skybox borders (could be fixed with VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT)

Useless/Complicated:
	Pass material to Fragment Shader
	Skybox shouldn't require transformation matrices? Just rotating
	TerrainGrid: Use int instead of floats for map key?
	TerrainGrid: Update CB only if new chuncks are required (not only when camera doesn't move)

Abstract:
	> Textures set (share textures)
	> Descriptor set

Model & Data system:
	Each ModelData could have: Vertices, Color buffers, textures, texture coords, Indices, UBO class, shaders, vertex struct
	Unique elements (always): Vertices, indices, shaders
	Unique elements (sometimes): Color buffer, texture coords,
	Shared elements (sometimes): UBO class, Textures, vertex struct(Vertices, color, textCoords)

--------------------------------------------------------------------------

Make Readme.md for knowing how to build the project
Upload to git
Doxygen comments

String variables containing paths
Progresive probability of finding certain stuff
terrain extender beyond limits (big numbers)
gui bar for shininess & specularStrength
Function for normals generation (and more encapsulations?)

LOD > Endless terrain (pixel circle) > Threading > Change resolution depending on distance from the viewer >
> not updating chunks in every frame (make the viewer move some distance before doing it (viewerMoveThresholdForChunckUpdate)) (remember that getting the square distance is faster than actual distance)

Pixel area (border's normals) (different LOD areas joints)

learnopengl

Bug:   NoiseSurface terrX = (worldChunks.chunkDict[k]);     // double free or corruption (!prev)
Class encapsulation of OpenGL functions
ImGui
Light cast
Compute MVP matrices only once
Pass parameters to the shader as uniforms (instead of hard-coding them in the shader)
Single VAO for all chuncks
BENCHMARK terrain generation (single VAO Vs multiple VAO)

terrainChunks:
        (X) Fog
        ( ) Don't show non-visible chunks
        ( ) Low level of detail far away
	( ) When fixing borders normals, don't compute noise again if it can be taken from the chunk next to it
	(X) Rounded area
	(X) Follow the camera
	(X) Don't send again to GPU already sent chunks
	(X) Hay acumulaciÃ³n de chunks creciente al avanzar?? No lo es
	(X) Encapsular terrain rendering
	(X) Ommit first terrain creation

--- Issues ------------------
Vertex data (vertex, color, texture coords, indices) passed directly to a ModelData object. Problem:
If such data is passed by reference, the user has to wait until the data is loaded after fullConstructor().
If it is passed by value, user don't have to worry.

Constructor sets flag dataFromFile and fullyConstructed
fullConstruction uses dataFromFile
User uses fullyConstructed for knowing how long ModelData needs the data visible 
Alternatively, dont include fullyConstructed, but copy data directly

--- Visual code ------------------
Doesn't detect macros declared in CMakeLists.txt
Doesn't have key combination for "save all"

----------------------------------

Doxygen comments (including documenting files)


